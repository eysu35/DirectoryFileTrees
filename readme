Assignment 4 readme File

------------------------------------------------------------------------
Student 1: What is your name?

Ellen Su

------------------------------------------------------------------------
Student 2: What is your name?

Michael Garcia

------------------------------------------------------------------------
Student 1: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such 
documents include the course's lecture slides and precept handouts.

The course's current staff members outside of class time through office hours.

Current lab teaching assistants through visits to the course labs.

------------------------------------------------------------------------
Student 2: What authorized sources of information did you use to
complete the assignment? COPY THE LIST of authorized sources of
information given in the "Policies" web page (also available on armlab
in the file ~cos217/AuthorizedSourcesList ) to this section of the
readme file, and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such 
documents include the course's lecture slides and precept handouts.

The course's current staff members outside of class time through office hours.

Current lab teaching assistants through visits to the course labs.

------------------------------------------------------------------------
Student 1: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 2: What unauthorized sources of information did you use to
complete the assignment? List any unauthorized sources of information
that you used to complete the assignment, and describe how you used
them. The course "Policies" web page defines unauthorized sources of
information, and any source that you have used but not listed in the
authorized sources should be included here. Please note that using an
unauthorized source may trigger a course penalty, and depending on the
nature of the interaction, may additionally require the interaction
being reported to the Committee on Discipline. Write "None" if you used
no unauthorized sources of information.

None

------------------------------------------------------------------------
Student 1: What is your assessment of the assignment? Was it helpful?
Was it fun?

I thought this assignment was useful to learn about gdb, modularity,
and debugging. However, I also found the work in part 3 a bit 
frustrating as the volumn of functions and code we were working with
made it very complicated to debug. It was somewhat helpful to my 
learning and was not the most fun assignment. 

------------------------------------------------------------------------
Student 2: What is your assessment of the assignment? Was it helpful?
Was it fun?

I found it somewhat interesting, but very tedious and vague. 
In the early stages, we found it difficult to progress as the 
assignment instructions were opaque and confusing, leaving us unsure 
what the assignment exactly was. A clear example of this is the FT_stat()
function, which we had no idea what it was supposed to do (and course 
staff declined to provide a clear answer on Ed). Moreover, in the development
process, since instructions and information was so vague, we spent the 
vast majority of our time debugging our program, using the exact same 
debugging tools as in prior assignments (primarily with gdb). Since we 
already had plenty of experience with this from past assignmnets, this felt 
unnecesarily tedious.

The one aspect I did like about this assignment was working with multiple
files and working with "others code"... however providing clearer 
instructions and information would accomplish the same goal.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

We understand that some of are files are very long and so we added
many comments throughout the code to try and help the grader 
understand our work! Hopefully it is clear enough :)

------------------------------------------------------------------------
What warnings does splint generate for Part 2's checker, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

nodeGood.c: (in function Node_hasChild)
nodeGood.c:172:18: Variable index used before definition
      An rvalue is used that may not be initialized to a value on some execution
      path. (Use -usedef to inhibit warning)
nodeGood.c: (in function Node_unlinkChild)
nodeGood.c:266:47: Variable i used before definition
dynarray.c: (in function DynArray_bsearch)
dynarray.c:428:27: Variable ppvInsert used before definition
node.h:61:5: Function Node_getType declared but not defined
      A function or variable is declared, but not defined in any source code file.
      (Use -declundef to inhibit warning)

These first four warnings are worried that we are returning or accessing
variables that were defined in function calls or conditionals. For ex,
some of these variables are manipulated by passing their memory address
to dynarray_bsearch. However, we are confident that each of the functions
that manipulate these variables are essential to the module working and 
thus these variables will all be initialized at the end. (we see
these same 4 warnings again in partt 3)
------------------------------------------------------------------------
What warnings does critTer generate on checkerDT.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

a4def.h: line 17: high priority:
A comment should appear above each global variable.

There is a comment above line 17 in a4def.h that says "/* In lieu 
of a proper boolean datatype */". Not sure why CritTer is not
picking this up. 

checkerDT.c: line 58: low priority:
This area is deeply nested at level 4, consider refactoring

checkerDT.c: line 62: low priority:
This area is deeply nested at level 4, consider refactoring

checkerDT.c: line 67: low priority:
This area is deeply nested at level 4, consider refactoring

If we want to check very specific cases in our code, we must use
nested conditionals to filter for the cases that we want. Thus, 
this deep nesting, although not ideal, is acceptable in this case
of the CheckerDT.c as it helps us accomplish our goal. 

------------------------------------------------------------------------
What warnings does splint generate on your Part 3 code, and what are
your disagreements with them? Copy the splint warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

node.c: (in function Node_hasChild)
node.c:197:18: Variable index used before definition
An rvalue is used that may not be initialized to a value on some execution
path. (Use -usedef to inhibit warning)
node.c: (in function Node_updateFileContents)
node.c:245:11: Variable oldContents used before definition
node.c: (in function Node_unlinkChild)
node.c:343:48: Variable i used before definition
dynarray.c: (in function DynArray_bsearch)
dynarray.c:428:27: Variable ppvInsert used before definition

These first four warnings are worried that we are returning or accessing
variables that were defined in function calls or conditionals. For ex,
some of these variables are manipulated by passing their memory address
to dynarray_bsearch. However, we are confident that each of the functions
that manipulate these variables are essential to the module working and 
thus these variables will all be initialized at the end. 

ft.h:34:9: Function exported but not used outside ft: FT_containsDir
A declaration is exported, but not used outside this module. Declaration can
use static qualifier. (Use -exportlocal to inhibit warning)
ft.c:399:1: Definition of FT_containsDir
ft.h:63:9: Function exported but not used outside ft: FT_containsFile
ft.c:527:1: Definition of FT_containsFile
node.h:87:5: Function exported but not used outside node: Node_hasChild
node.c:200:1: Definition of Node_hasChild

These next three errors are all occurring because some functions are 
only used within their own files. We believe it is alright to have
these helper functions within our programs that keep the code modular. 

------------------------------------------------------------------------
What warnings does critTer generate on your Part 3 code, and what are
your disagreements with them? Copy the critTer warnings here, and
express your disagreement after each warning. If there are no
warnings, then write "None."

---------------------- ft.c ---------------------------

Warning #1: 
ft.c: line 746: low priority: 
A file should contain no more than 15 functions;
this file contains 20 functions

We partially agree with this warning for modularity and stylistic reasons,
but we ultimately disagree from a functional perspective. Having a lot 
of static helper functions is what makes the function so large and, if
we had more time, we would likely try to refactor so the helper functions
can reside in a separate helper file. However, all of these functions 
are necessary for the function to operate correctly, so thus we disagree.


# Warning #2: 
ft.c: line 453: medium priority:
Do you want to validate 'contents' through an assert?

We disagree. Contents can have a null value (or any value), so
there's no need to check its value. 


# Warning #3:
ft.c: line 616: medium priority:
Do you want to validate 'newContents' through an assert?

We disagree - same reasoning as Warning #2.


# Warning #4:
ft.c: line 745: low priority: 
A source code file should contain fewer than 500 lines;
this file contains 746 lines

We disagree - same reasoning as Warning #1. 

--------------  node.c ----------------------------

node.c: line 393: low priority:
A file should contain no more than 15 functions;
this file contains 18 functions

We sacrificed having fewer functions to modularize our 
code and reduce repetition of logic throughout the functions.

node.c: line 176: medium priority:
Do you want to validate 'childID' through an assert?

We disagree with this warning since 'childID' is of 
type size_t. If we were to assert it is not null, we 
would have to cast it to a type_t to avoid a type error. 
However, that would change the NULL to a size_t 0. Since
'childID' is allowed to be 0, that would be wrong. 

node.c: line 223: medium priority:
Do you want to validate 'contents' through an assert?

No. Contents are allowed to be NULL so we do not need to 
assert otherwise. 

node.c: line 265: low priority:
This function definition probably needs more local comments

Since this function is taken directly from the sample code, 
we did not feel that we had to include comments. If our own
code was as long as this function, we included many comments
to make it more readable!

------------------------------------------------------------------------
For each of the first three faulty BDT implementations required by Step
1.5, identify the function where there is a bug. You do not have to
identify the bug itself, only its location, but note that this must be
the location of the underlying error, which is not necessarily where
the error manifests itself or is "noticed" by the client.


      Executable         Function with the underlying error
===============================================================
         ./bdtBad1       BDT_insertPath  
---------------------------------------------------------------
         ./bdtBad2       BDT_newNode
---------------------------------------------------------------
         ./bdtBad3       BDT_unlinkParentToChild
===============================================================

------------------------------------------------------------------------
bdtBad4 and bdtBad5 are optional extra credit:

For bdtBad4, you do not have to find the bug. Instead, indicate what
is the fundamental difference with trying to debug this executable in
gdb versus the first three:

bdtBad4 was significantlyy easier to debug due to all of the in
function comments. Although there was a bug in the code, this
generous commenting is good programming practice and should be 
simulated in our own code. 

For bdtBad5, you do not have to find the bug. Instead, indicate one
hypothesis for how the program could crash within the DynArray module,
which we promise is itself correct:



------------------------------------------------------------------------
What are your critiques of the given DT implementations, as
specified in Step 2.5?

1) DT_traversePathFrom is poorly named. It does not specify what it is 
traversing the path for (the last existing node in the path).

2) DT_traversePath is a useless function. All it does is check to make
sure path is not null and call DT_traversePathAt with path. Since 
DT_traversePathAt also asserts that path != NULL, this function is
pointless. 

3) DT_rmPathFrom is a useless function. It is only called in DT_rmPathAt
to remove the node curr and all its children. Since DT_rmPathFrom is a
one line function, it seves no purpose to modularize this.


------------------------------------------------------------------------
